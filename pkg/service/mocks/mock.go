// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "book-api/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookWork is a mock of BookWork interface.
type MockBookWork struct {
	ctrl     *gomock.Controller
	recorder *MockBookWorkMockRecorder
}

// MockBookWorkMockRecorder is the mock recorder for MockBookWork.
type MockBookWorkMockRecorder struct {
	mock *MockBookWork
}

// NewMockBookWork creates a new mock instance.
func NewMockBookWork(ctrl *gomock.Controller) *MockBookWork {
	mock := &MockBookWork{ctrl: ctrl}
	mock.recorder = &MockBookWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookWork) EXPECT() *MockBookWorkMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookWork) CreateBook(req models.BookRequest) (*models.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", req)
	ret0, _ := ret[0].(*models.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookWorkMockRecorder) CreateBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookWork)(nil).CreateBook), req)
}

// DeleteBook mocks base method.
func (m *MockBookWork) DeleteBook(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookWorkMockRecorder) DeleteBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookWork)(nil).DeleteBook), id)
}

// GetBookById mocks base method.
func (m *MockBookWork) GetBookById(id int) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockBookWorkMockRecorder) GetBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockBookWork)(nil).GetBookById), id)
}

// GetBooks mocks base method.
func (m *MockBookWork) GetBooks(bookname, genre string) (*[]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", bookname, genre)
	ret0, _ := ret[0].(*[]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBookWorkMockRecorder) GetBooks(bookname, genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookWork)(nil).GetBooks), bookname, genre)
}

// UpdateBook mocks base method.
func (m *MockBookWork) UpdateBook(req models.Book) (*models.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", req)
	ret0, _ := ret[0].(*models.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookWorkMockRecorder) UpdateBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookWork)(nil).UpdateBook), req)
}
